{"ast":null,"code":"var _jsxFileName = \"/Users/mayurk/TechDataLineage/TechDataLineage/frontend/src/components/LineageGraph.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport mermaid from 'mermaid';\nimport domtoimage from 'dom-to-image';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst LineageGraph = ({\n  graphDefinition\n}) => {\n  _s();\n  const [svgContent, setSvgContent] = useState('');\n  const [error, setError] = useState('');\n  const uniqueId = useRef(`mermaid-graph-${Math.random().toString(36).substr(2, 9)}`);\n  const graphContainerRef = useRef(null); // Ref for the div containing the SVG\n\n  useEffect(() => {\n    if (graphDefinition) {\n      setError(''); // Clear previous errors\n      mermaid.render(uniqueId.current, graphDefinition).then(({\n        svg\n      }) => {\n        setSvgContent(svg);\n      }).catch(e => {\n        console.error(\"Mermaid rendering error:\", e);\n        setError(`Error rendering graph: ${e.message}`);\n        setSvgContent(''); // Clear SVG content on error\n      });\n    } else {\n      setSvgContent('');\n      setError('');\n    }\n  }, [graphDefinition]);\n  const handleDownloadImage = () => {\n    if (graphContainerRef.current && svgContent) {\n      domtoimage.toPng(graphContainerRef.current).then(function (dataUrl) {\n        var link = document.createElement('a');\n        link.download = 'lineage-graph.png';\n        link.href = dataUrl;\n        link.click();\n      }).catch(function (error) {\n        console.error('oops, something went wrong!', error);\n        setError('Failed to download image.');\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"lineage-graph\",\n    children: [error && /*#__PURE__*/_jsxDEV(\"pre\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 23\n    }, this), svgContent ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDownloadImage,\n        style: {\n          marginBottom: '10px'\n        },\n        children: \"Download Graph as PNG\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: graphContainerRef,\n        dangerouslySetInnerHTML: {\n          __html: svgContent\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true) :\n    /*#__PURE__*/\n    // Fallback for when graphDefinition is empty or rendering is in progress\n    _jsxDEV(\"pre\", {\n      children: graphDefinition\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n_s(LineageGraph, \"4I0jkSAi3QXEItKlrg74hmTxgUk=\");\n_c = LineageGraph;\nexport default LineageGraph;\nvar _c;\n$RefreshReg$(_c, \"LineageGraph\");","map":{"version":3,"names":["React","useEffect","useRef","useState","mermaid","domtoimage","jsxDEV","_jsxDEV","Fragment","_Fragment","LineageGraph","graphDefinition","_s","svgContent","setSvgContent","error","setError","uniqueId","Math","random","toString","substr","graphContainerRef","render","current","then","svg","catch","e","console","message","handleDownloadImage","toPng","dataUrl","link","document","createElement","download","href","click","className","children","style","color","fileName","_jsxFileName","lineNumber","columnNumber","onClick","marginBottom","ref","dangerouslySetInnerHTML","__html","_c","$RefreshReg$"],"sources":["/Users/mayurk/TechDataLineage/TechDataLineage/frontend/src/components/LineageGraph.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport mermaid from 'mermaid';\nimport domtoimage from 'dom-to-image';\n\nconst LineageGraph = ({ graphDefinition }) => {\n    const [svgContent, setSvgContent] = useState('');\n    const [error, setError] = useState('');\n    const uniqueId = useRef(`mermaid-graph-${Math.random().toString(36).substr(2, 9)}`);\n    const graphContainerRef = useRef(null); // Ref for the div containing the SVG\n\n    useEffect(() => {\n        if (graphDefinition) {\n            setError(''); // Clear previous errors\n            mermaid.render(uniqueId.current, graphDefinition)\n                .then(({ svg }) => {\n                    setSvgContent(svg);\n                })\n                .catch((e) => {\n                    console.error(\"Mermaid rendering error:\", e);\n                    setError(`Error rendering graph: ${e.message}`);\n                    setSvgContent(''); // Clear SVG content on error\n                });\n        } else {\n            setSvgContent('');\n            setError('');\n        }\n    }, [graphDefinition]);\n\n    const handleDownloadImage = () => {\n        if (graphContainerRef.current && svgContent) {\n            domtoimage.toPng(graphContainerRef.current)\n                .then(function (dataUrl) {\n                    var link = document.createElement('a');\n                    link.download = 'lineage-graph.png';\n                    link.href = dataUrl;\n                    link.click();\n                })\n                .catch(function (error) {\n                    console.error('oops, something went wrong!', error);\n                    setError('Failed to download image.');\n                });\n        }\n    };\n\n    return (\n        <div className=\"lineage-graph\">\n            {error && <pre style={{ color: 'red' }}>{error}</pre>}\n            {svgContent ? (\n                <>\n                    <button onClick={handleDownloadImage} style={{ marginBottom: '10px' }}>Download Graph as PNG</button>\n                    <div ref={graphContainerRef} dangerouslySetInnerHTML={{ __html: svgContent }} />\n                </>\n            ) : (\n                // Fallback for when graphDefinition is empty or rendering is in progress\n                <pre>{graphDefinition}</pre>\n            )}\n        </div>\n    );\n};\n\nexport default LineageGraph;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}