{"ast":null,"code":"var _jsxFileName = \"/Users/mayurk/TechDataLineage/TechDataLineage/frontend/src/components/LineageGraph.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport mermaid from 'mermaid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LineageGraph = ({\n  graphDefinition\n}) => {\n  _s();\n  const [svgContent, setSvgContent] = useState('');\n  const [error, setError] = useState('');\n  const uniqueId = useRef(`mermaid-graph-${Math.random().toString(36).substr(2, 9)}`);\n  useEffect(() => {\n    if (graphDefinition) {\n      setError(''); // Clear previous errors\n      mermaid.render(uniqueId.current, graphDefinition).then(({\n        svg\n      }) => {\n        setSvgContent(svg);\n      }).catch(e => {\n        console.error(\"Mermaid rendering error:\", e);\n        setError(`Error rendering graph: ${e.message}`);\n        setSvgContent(''); // Clear SVG content on error\n      });\n    } else {\n      setSvgContent('');\n      setError('');\n    }\n  }, [graphDefinition]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"lineage-graph\",\n    children: [error && /*#__PURE__*/_jsxDEV(\"pre\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 23\n    }, this), svgContent ? /*#__PURE__*/_jsxDEV(\"div\", {\n      dangerouslySetInnerHTML: {\n        __html: svgContent\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    }, this) :\n    /*#__PURE__*/\n    // Fallback for when graphDefinition is empty or rendering is in progress\n    _jsxDEV(\"pre\", {\n      children: graphDefinition\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n};\n_s(LineageGraph, \"bP6u8Fms+4Hjl/98s5Ud4HQvbYM=\");\n_c = LineageGraph;\nexport default LineageGraph;\nvar _c;\n$RefreshReg$(_c, \"LineageGraph\");","map":{"version":3,"names":["React","useEffect","useRef","useState","mermaid","jsxDEV","_jsxDEV","LineageGraph","graphDefinition","_s","svgContent","setSvgContent","error","setError","uniqueId","Math","random","toString","substr","render","current","then","svg","catch","e","console","message","className","children","style","color","fileName","_jsxFileName","lineNumber","columnNumber","dangerouslySetInnerHTML","__html","_c","$RefreshReg$"],"sources":["/Users/mayurk/TechDataLineage/TechDataLineage/frontend/src/components/LineageGraph.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport mermaid from 'mermaid';\n\nconst LineageGraph = ({ graphDefinition }) => {\n    const [svgContent, setSvgContent] = useState('');\n    const [error, setError] = useState('');\n    const uniqueId = useRef(`mermaid-graph-${Math.random().toString(36).substr(2, 9)}`);\n\n    useEffect(() => {\n        if (graphDefinition) {\n            setError(''); // Clear previous errors\n            mermaid.render(uniqueId.current, graphDefinition)\n                .then(({ svg }) => {\n                    setSvgContent(svg);\n                })\n                .catch((e) => {\n                    console.error(\"Mermaid rendering error:\", e);\n                    setError(`Error rendering graph: ${e.message}`);\n                    setSvgContent(''); // Clear SVG content on error\n                });\n        } else {\n            setSvgContent('');\n            setError('');\n        }\n    }, [graphDefinition]);\n\n    return (\n        <div className=\"lineage-graph\">\n            {error && <pre style={{ color: 'red' }}>{error}</pre>}\n            {svgContent ? (\n                <div dangerouslySetInnerHTML={{ __html: svgContent }} />\n            ) : (\n                // Fallback for when graphDefinition is empty or rendering is in progress\n                <pre>{graphDefinition}</pre>\n            )}\n        </div>\n    );\n};\n\nexport default LineageGraph;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAOC,OAAO,MAAM,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAgB,CAAC,KAAK;EAAAC,EAAA;EAC1C,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAMW,QAAQ,GAAGZ,MAAM,CAAC,iBAAiBa,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC;EAEnFjB,SAAS,CAAC,MAAM;IACZ,IAAIO,eAAe,EAAE;MACjBK,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;MACdT,OAAO,CAACe,MAAM,CAACL,QAAQ,CAACM,OAAO,EAAEZ,eAAe,CAAC,CAC5Ca,IAAI,CAAC,CAAC;QAAEC;MAAI,CAAC,KAAK;QACfX,aAAa,CAACW,GAAG,CAAC;MACtB,CAAC,CAAC,CACDC,KAAK,CAAEC,CAAC,IAAK;QACVC,OAAO,CAACb,KAAK,CAAC,0BAA0B,EAAEY,CAAC,CAAC;QAC5CX,QAAQ,CAAC,0BAA0BW,CAAC,CAACE,OAAO,EAAE,CAAC;QAC/Cf,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC;MACvB,CAAC,CAAC;IACV,CAAC,MAAM;MACHA,aAAa,CAAC,EAAE,CAAC;MACjBE,QAAQ,CAAC,EAAE,CAAC;IAChB;EACJ,CAAC,EAAE,CAACL,eAAe,CAAC,CAAC;EAErB,oBACIF,OAAA;IAAKqB,SAAS,EAAC,eAAe;IAAAC,QAAA,GACzBhB,KAAK,iBAAIN,OAAA;MAAKuB,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAM,CAAE;MAAAF,QAAA,EAAEhB;IAAK;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,EACpDxB,UAAU,gBACPJ,OAAA;MAAK6B,uBAAuB,EAAE;QAAEC,MAAM,EAAE1B;MAAW;IAAE;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;IAAA;IAExD;IACA5B,OAAA;MAAAsB,QAAA,EAAMpB;IAAe;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAC9B;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAACzB,EAAA,CAlCIF,YAAY;AAAA8B,EAAA,GAAZ9B,YAAY;AAoClB,eAAeA,YAAY;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}