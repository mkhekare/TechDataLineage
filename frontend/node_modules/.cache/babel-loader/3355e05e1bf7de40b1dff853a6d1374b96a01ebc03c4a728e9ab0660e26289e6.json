{"ast":null,"code":"import { setupViewPortForSVG } from \"./chunk-SKB7J2MH.mjs\";\nimport { isLabelStyle, styles2String } from \"./chunk-UWXLY5YG.mjs\";\nimport { populateCommonDb } from \"./chunk-353BL4L5.mjs\";\nimport { ImperativeState } from \"./chunk-AACKK3MU.mjs\";\nimport { cleanAndMerge } from \"./chunk-55PJQP7W.mjs\";\nimport { selectSvgElement } from \"./chunk-P3VETL53.mjs\";\nimport { __name, clear, configureSvgSize, defaultConfig_default, getAccDescription, getAccTitle, getConfig, getDiagramTitle, log, setAccDescription, setAccTitle, setDiagramTitle } from \"./chunk-3XYRH5AP.mjs\";\n\n// src/diagrams/treemap/db.ts\nvar defaultTreemapData = {\n  nodes: [],\n  levels: /* @__PURE__ */new Map(),\n  outerNodes: [],\n  classes: /* @__PURE__ */new Map()\n};\nvar state = new ImperativeState(() => structuredClone(defaultTreemapData));\nvar getConfig2 = /* @__PURE__ */__name(() => {\n  const defaultConfig = defaultConfig_default;\n  const userConfig = getConfig();\n  return cleanAndMerge({\n    ...defaultConfig.treemap,\n    ...(userConfig.treemap ?? {})\n  });\n}, \"getConfig\");\nvar getNodes = /* @__PURE__ */__name(() => state.records.nodes, \"getNodes\");\nvar addNode = /* @__PURE__ */__name((node, level) => {\n  const data = state.records;\n  data.nodes.push(node);\n  data.levels.set(node, level);\n  if (level === 0) {\n    data.outerNodes.push(node);\n  }\n  if (level === 0 && !data.root) {\n    data.root = node;\n  }\n}, \"addNode\");\nvar getRoot = /* @__PURE__ */__name(() => ({\n  name: \"\",\n  children: state.records.outerNodes\n}), \"getRoot\");\nvar addClass = /* @__PURE__ */__name((id, _style) => {\n  const classes = state.records.classes;\n  const styleClass = classes.get(id) ?? {\n    id,\n    styles: [],\n    textStyles: []\n  };\n  classes.set(id, styleClass);\n  const styles = _style.replace(/\\\\,/g, \"\\xA7\\xA7\\xA7\").replace(/,/g, \";\").replace(/§§§/g, \",\").split(\";\");\n  if (styles) {\n    styles.forEach(s => {\n      if (isLabelStyle(s)) {\n        if (styleClass?.textStyles) {\n          styleClass.textStyles.push(s);\n        } else {\n          styleClass.textStyles = [s];\n        }\n      }\n      if (styleClass?.styles) {\n        styleClass.styles.push(s);\n      } else {\n        styleClass.styles = [s];\n      }\n    });\n  }\n  classes.set(id, styleClass);\n}, \"addClass\");\nvar getClasses = /* @__PURE__ */__name(() => {\n  return state.records.classes;\n}, \"getClasses\");\nvar getStylesForClass = /* @__PURE__ */__name(classSelector => {\n  return state.records.classes.get(classSelector)?.styles ?? [];\n}, \"getStylesForClass\");\nvar clear2 = /* @__PURE__ */__name(() => {\n  clear();\n  state.reset();\n}, \"clear\");\nvar db = {\n  getNodes,\n  addNode,\n  getRoot,\n  getConfig: getConfig2,\n  clear: clear2,\n  setAccTitle,\n  getAccTitle,\n  setDiagramTitle,\n  getDiagramTitle,\n  getAccDescription,\n  setAccDescription,\n  addClass,\n  getClasses,\n  getStylesForClass\n};\n\n// src/diagrams/treemap/parser.ts\nimport { parse } from \"@mermaid-js/parser\";\n\n// src/diagrams/treemap/utils.ts\nfunction buildHierarchy(items) {\n  if (!items.length) {\n    return [];\n  }\n  const root = [];\n  const stack = [];\n  items.forEach(item => {\n    const node = {\n      name: item.name,\n      children: item.type === \"Leaf\" ? void 0 : []\n    };\n    node.classSelector = item?.classSelector;\n    if (item?.cssCompiledStyles) {\n      node.cssCompiledStyles = [item.cssCompiledStyles];\n    }\n    if (item.type === \"Leaf\" && item.value !== void 0) {\n      node.value = item.value;\n    }\n    while (stack.length > 0 && stack[stack.length - 1].level >= item.level) {\n      stack.pop();\n    }\n    if (stack.length === 0) {\n      root.push(node);\n    } else {\n      const parent = stack[stack.length - 1].node;\n      if (parent.children) {\n        parent.children.push(node);\n      } else {\n        parent.children = [node];\n      }\n    }\n    if (item.type !== \"Leaf\") {\n      stack.push({\n        node,\n        level: item.level\n      });\n    }\n  });\n  return root;\n}\n__name(buildHierarchy, \"buildHierarchy\");\n\n// src/diagrams/treemap/parser.ts\nvar populate = /* @__PURE__ */__name(ast => {\n  populateCommonDb(ast, db);\n  const items = [];\n  for (const row of ast.TreemapRows ?? []) {\n    if (row.$type === \"ClassDefStatement\") {\n      db.addClass(row.className ?? \"\", row.styleText ?? \"\");\n    }\n  }\n  for (const row of ast.TreemapRows ?? []) {\n    const item = row.item;\n    if (!item) {\n      continue;\n    }\n    const level = row.indent ? parseInt(row.indent) : 0;\n    const name = getItemName(item);\n    const styles = item.classSelector ? db.getStylesForClass(item.classSelector) : [];\n    const cssCompiledStyles = styles.length > 0 ? styles.join(\";\") : void 0;\n    const itemData = {\n      level,\n      name,\n      type: item.$type,\n      value: item.value,\n      classSelector: item.classSelector,\n      cssCompiledStyles\n    };\n    items.push(itemData);\n  }\n  const hierarchyNodes = buildHierarchy(items);\n  const addNodesRecursively = /* @__PURE__ */__name((nodes, level) => {\n    for (const node of nodes) {\n      db.addNode(node, level);\n      if (node.children && node.children.length > 0) {\n        addNodesRecursively(node.children, level + 1);\n      }\n    }\n  }, \"addNodesRecursively\");\n  addNodesRecursively(hierarchyNodes, 0);\n}, \"populate\");\nvar getItemName = /* @__PURE__ */__name(item => {\n  return item.name ? String(item.name) : \"\";\n}, \"getItemName\");\nvar parser = {\n  parse: /* @__PURE__ */__name(async text => {\n    try {\n      const parseFunc = parse;\n      const ast = await parseFunc(\"treemap\", text);\n      log.debug(\"Treemap AST:\", ast);\n      populate(ast);\n    } catch (error) {\n      log.error(\"Error parsing treemap:\", error);\n      throw error;\n    }\n  }, \"parse\")\n};\n\n// src/diagrams/treemap/renderer.ts\nimport { scaleOrdinal, treemap, hierarchy, format, select } from \"d3\";\nvar DEFAULT_INNER_PADDING = 10;\nvar SECTION_INNER_PADDING = 10;\nvar SECTION_HEADER_HEIGHT = 25;\nvar draw = /* @__PURE__ */__name((_text, id, _version, diagram2) => {\n  const treemapDb = diagram2.db;\n  const config = treemapDb.getConfig();\n  const treemapInnerPadding = config.padding ?? DEFAULT_INNER_PADDING;\n  const title = treemapDb.getDiagramTitle();\n  const root = treemapDb.getRoot();\n  const {\n    themeVariables\n  } = getConfig();\n  if (!root) {\n    return;\n  }\n  const titleHeight = title ? 30 : 0;\n  const svg = selectSvgElement(id);\n  const width = config.nodeWidth ? config.nodeWidth * SECTION_INNER_PADDING : 960;\n  const height = config.nodeHeight ? config.nodeHeight * SECTION_INNER_PADDING : 500;\n  const svgWidth = width;\n  const svgHeight = height + titleHeight;\n  svg.attr(\"viewBox\", `0 0 ${svgWidth} ${svgHeight}`);\n  configureSvgSize(svg, svgHeight, svgWidth, config.useMaxWidth);\n  let valueFormat;\n  try {\n    const formatStr = config.valueFormat || \",\";\n    if (formatStr === \"$0,0\") {\n      valueFormat = /* @__PURE__ */__name(value => \"$\" + format(\",\")(value), \"valueFormat\");\n    } else if (formatStr.startsWith(\"$\") && formatStr.includes(\",\")) {\n      const precision = /\\.\\d+/.exec(formatStr);\n      const precisionStr = precision ? precision[0] : \"\";\n      valueFormat = /* @__PURE__ */__name(value => \"$\" + format(\",\" + precisionStr)(value), \"valueFormat\");\n    } else if (formatStr.startsWith(\"$\")) {\n      const restOfFormat = formatStr.substring(1);\n      valueFormat = /* @__PURE__ */__name(value => \"$\" + format(restOfFormat || \"\")(value), \"valueFormat\");\n    } else {\n      valueFormat = format(formatStr);\n    }\n  } catch (error) {\n    log.error(\"Error creating format function:\", error);\n    valueFormat = format(\",\");\n  }\n  const colorScale = scaleOrdinal().range([\"transparent\", themeVariables.cScale0, themeVariables.cScale1, themeVariables.cScale2, themeVariables.cScale3, themeVariables.cScale4, themeVariables.cScale5, themeVariables.cScale6, themeVariables.cScale7, themeVariables.cScale8, themeVariables.cScale9, themeVariables.cScale10, themeVariables.cScale11]);\n  const colorScalePeer = scaleOrdinal().range([\"transparent\", themeVariables.cScalePeer0, themeVariables.cScalePeer1, themeVariables.cScalePeer2, themeVariables.cScalePeer3, themeVariables.cScalePeer4, themeVariables.cScalePeer5, themeVariables.cScalePeer6, themeVariables.cScalePeer7, themeVariables.cScalePeer8, themeVariables.cScalePeer9, themeVariables.cScalePeer10, themeVariables.cScalePeer11]);\n  const colorScaleLabel = scaleOrdinal().range([themeVariables.cScaleLabel0, themeVariables.cScaleLabel1, themeVariables.cScaleLabel2, themeVariables.cScaleLabel3, themeVariables.cScaleLabel4, themeVariables.cScaleLabel5, themeVariables.cScaleLabel6, themeVariables.cScaleLabel7, themeVariables.cScaleLabel8, themeVariables.cScaleLabel9, themeVariables.cScaleLabel10, themeVariables.cScaleLabel11]);\n  if (title) {\n    svg.append(\"text\").attr(\"x\", svgWidth / 2).attr(\"y\", titleHeight / 2).attr(\"class\", \"treemapTitle\").attr(\"text-anchor\", \"middle\").attr(\"dominant-baseline\", \"middle\").text(title);\n  }\n  const g = svg.append(\"g\").attr(\"transform\", `translate(0, ${titleHeight})`).attr(\"class\", \"treemapContainer\");\n  const hierarchyRoot = hierarchy(root).sum(d => d.value ?? 0).sort((a, b) => (b.value ?? 0) - (a.value ?? 0));\n  const treemapLayout = treemap().size([width, height]).paddingTop(d => d.children && d.children.length > 0 ? SECTION_HEADER_HEIGHT + SECTION_INNER_PADDING : 0).paddingInner(treemapInnerPadding).paddingLeft(d => d.children && d.children.length > 0 ? SECTION_INNER_PADDING : 0).paddingRight(d => d.children && d.children.length > 0 ? SECTION_INNER_PADDING : 0).paddingBottom(d => d.children && d.children.length > 0 ? SECTION_INNER_PADDING : 0).round(true);\n  const treemapData = treemapLayout(hierarchyRoot);\n  const branchNodes = treemapData.descendants().filter(d => d.children && d.children.length > 0);\n  const sections = g.selectAll(\".treemapSection\").data(branchNodes).enter().append(\"g\").attr(\"class\", \"treemapSection\").attr(\"transform\", d => `translate(${d.x0},${d.y0})`);\n  sections.append(\"rect\").attr(\"width\", d => d.x1 - d.x0).attr(\"height\", SECTION_HEADER_HEIGHT).attr(\"class\", \"treemapSectionHeader\").attr(\"fill\", \"none\").attr(\"fill-opacity\", 0.6).attr(\"stroke-width\", 0.6).attr(\"style\", d => {\n    if (d.depth === 0) {\n      return \"display: none;\";\n    }\n    return \"\";\n  });\n  sections.append(\"clipPath\").attr(\"id\", (_d, i) => `clip-section-${id}-${i}`).append(\"rect\").attr(\"width\", d => Math.max(0, d.x1 - d.x0 - 12)).attr(\"height\", SECTION_HEADER_HEIGHT);\n  sections.append(\"rect\").attr(\"width\", d => d.x1 - d.x0).attr(\"height\", d => d.y1 - d.y0).attr(\"class\", (_d, i) => {\n    return `treemapSection section${i}`;\n  }).attr(\"fill\", d => colorScale(d.data.name)).attr(\"fill-opacity\", 0.6).attr(\"stroke\", d => colorScalePeer(d.data.name)).attr(\"stroke-width\", 2).attr(\"stroke-opacity\", 0.4).attr(\"style\", d => {\n    if (d.depth === 0) {\n      return \"display: none;\";\n    }\n    const styles = styles2String({\n      cssCompiledStyles: d.data.cssCompiledStyles\n    });\n    return styles.nodeStyles + \";\" + styles.borderStyles.join(\";\");\n  });\n  sections.append(\"text\").attr(\"class\", \"treemapSectionLabel\").attr(\"x\", 6).attr(\"y\", SECTION_HEADER_HEIGHT / 2).attr(\"dominant-baseline\", \"middle\").text(d => d.depth === 0 ? \"\" : d.data.name).attr(\"font-weight\", \"bold\").attr(\"style\", d => {\n    if (d.depth === 0) {\n      return \"display: none;\";\n    }\n    const labelStyles = \"dominant-baseline: middle; font-size: 12px; fill:\" + colorScaleLabel(d.data.name) + \"; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;\";\n    const styles = styles2String({\n      cssCompiledStyles: d.data.cssCompiledStyles\n    });\n    return labelStyles + styles.labelStyles.replace(\"color:\", \"fill:\");\n  }).each(function (d) {\n    if (d.depth === 0) {\n      return;\n    }\n    const self = select(this);\n    const originalText = d.data.name;\n    self.text(originalText);\n    const totalHeaderWidth = d.x1 - d.x0;\n    const labelXPosition = 6;\n    let spaceForTextContent;\n    if (config.showValues !== false && d.value) {\n      const valueEndsAtXRelative = totalHeaderWidth - 10;\n      const estimatedValueTextActualWidth = 30;\n      const gapBetweenLabelAndValue = 10;\n      const labelMustEndBeforeX = valueEndsAtXRelative - estimatedValueTextActualWidth - gapBetweenLabelAndValue;\n      spaceForTextContent = labelMustEndBeforeX - labelXPosition;\n    } else {\n      const labelOwnRightPadding = 6;\n      spaceForTextContent = totalHeaderWidth - labelXPosition - labelOwnRightPadding;\n    }\n    const minimumWidthToDisplay = 15;\n    const actualAvailableWidth = Math.max(minimumWidthToDisplay, spaceForTextContent);\n    const textNode = self.node();\n    const currentTextContentLength = textNode.getComputedTextLength();\n    if (currentTextContentLength > actualAvailableWidth) {\n      const ellipsis = \"...\";\n      let currentTruncatedText = originalText;\n      while (currentTruncatedText.length > 0) {\n        currentTruncatedText = originalText.substring(0, currentTruncatedText.length - 1);\n        if (currentTruncatedText.length === 0) {\n          self.text(ellipsis);\n          if (textNode.getComputedTextLength() > actualAvailableWidth) {\n            self.text(\"\");\n          }\n          break;\n        }\n        self.text(currentTruncatedText + ellipsis);\n        if (textNode.getComputedTextLength() <= actualAvailableWidth) {\n          break;\n        }\n      }\n    }\n  });\n  if (config.showValues !== false) {\n    sections.append(\"text\").attr(\"class\", \"treemapSectionValue\").attr(\"x\", d => d.x1 - d.x0 - 10).attr(\"y\", SECTION_HEADER_HEIGHT / 2).attr(\"text-anchor\", \"end\").attr(\"dominant-baseline\", \"middle\").text(d => d.value ? valueFormat(d.value) : \"\").attr(\"font-style\", \"italic\").attr(\"style\", d => {\n      if (d.depth === 0) {\n        return \"display: none;\";\n      }\n      const labelStyles = \"text-anchor: end; dominant-baseline: middle; font-size: 10px; fill:\" + colorScaleLabel(d.data.name) + \"; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;\";\n      const styles = styles2String({\n        cssCompiledStyles: d.data.cssCompiledStyles\n      });\n      return labelStyles + styles.labelStyles.replace(\"color:\", \"fill:\");\n    });\n  }\n  const leafNodes = treemapData.leaves();\n  const cell = g.selectAll(\".treemapLeafGroup\").data(leafNodes).enter().append(\"g\").attr(\"class\", (d, i) => {\n    return `treemapNode treemapLeafGroup leaf${i}${d.data.classSelector ? ` ${d.data.classSelector}` : \"\"}x`;\n  }).attr(\"transform\", d => `translate(${d.x0},${d.y0})`);\n  cell.append(\"rect\").attr(\"width\", d => d.x1 - d.x0).attr(\"height\", d => d.y1 - d.y0).attr(\"class\", \"treemapLeaf\").attr(\"fill\", d => {\n    return d.parent ? colorScale(d.parent.data.name) : colorScale(d.data.name);\n  }).attr(\"style\", d => {\n    const styles = styles2String({\n      cssCompiledStyles: d.data.cssCompiledStyles\n    });\n    return styles.nodeStyles;\n  }).attr(\"fill-opacity\", 0.3).attr(\"stroke\", d => {\n    return d.parent ? colorScale(d.parent.data.name) : colorScale(d.data.name);\n  }).attr(\"stroke-width\", 3);\n  cell.append(\"clipPath\").attr(\"id\", (_d, i) => `clip-${id}-${i}`).append(\"rect\").attr(\"width\", d => Math.max(0, d.x1 - d.x0 - 4)).attr(\"height\", d => Math.max(0, d.y1 - d.y0 - 4));\n  const leafLabels = cell.append(\"text\").attr(\"class\", \"treemapLabel\").attr(\"x\", d => (d.x1 - d.x0) / 2).attr(\"y\", d => (d.y1 - d.y0) / 2).attr(\"style\", d => {\n    const labelStyles = \"text-anchor: middle; dominant-baseline: middle; font-size: 38px;fill:\" + colorScaleLabel(d.data.name) + \";\";\n    const styles = styles2String({\n      cssCompiledStyles: d.data.cssCompiledStyles\n    });\n    return labelStyles + styles.labelStyles.replace(\"color:\", \"fill:\");\n  }).attr(\"clip-path\", (_d, i) => `url(#clip-${id}-${i})`).text(d => d.data.name);\n  leafLabels.each(function (d) {\n    const self = select(this);\n    const nodeWidth = d.x1 - d.x0;\n    const nodeHeight = d.y1 - d.y0;\n    const textNode = self.node();\n    const padding = 4;\n    const availableWidth = nodeWidth - 2 * padding;\n    const availableHeight = nodeHeight - 2 * padding;\n    if (availableWidth < 10 || availableHeight < 10) {\n      self.style(\"display\", \"none\");\n      return;\n    }\n    let currentLabelFontSize = parseInt(self.style(\"font-size\"), 10);\n    const minLabelFontSize = 8;\n    const originalValueRelFontSize = 28;\n    const valueScaleFactor = 0.6;\n    const minValueFontSize = 6;\n    const spacingBetweenLabelAndValue = 2;\n    while (textNode.getComputedTextLength() > availableWidth && currentLabelFontSize > minLabelFontSize) {\n      currentLabelFontSize--;\n      self.style(\"font-size\", `${currentLabelFontSize}px`);\n    }\n    let prospectiveValueFontSize = Math.max(minValueFontSize, Math.min(originalValueRelFontSize, Math.round(currentLabelFontSize * valueScaleFactor)));\n    let combinedHeight = currentLabelFontSize + spacingBetweenLabelAndValue + prospectiveValueFontSize;\n    while (combinedHeight > availableHeight && currentLabelFontSize > minLabelFontSize) {\n      currentLabelFontSize--;\n      prospectiveValueFontSize = Math.max(minValueFontSize, Math.min(originalValueRelFontSize, Math.round(currentLabelFontSize * valueScaleFactor)));\n      if (prospectiveValueFontSize < minValueFontSize && currentLabelFontSize === minLabelFontSize) {\n        break;\n      }\n      self.style(\"font-size\", `${currentLabelFontSize}px`);\n      combinedHeight = currentLabelFontSize + spacingBetweenLabelAndValue + prospectiveValueFontSize;\n      if (prospectiveValueFontSize <= minValueFontSize && combinedHeight > availableHeight) {}\n    }\n    self.style(\"font-size\", `${currentLabelFontSize}px`);\n    if (textNode.getComputedTextLength() > availableWidth || currentLabelFontSize < minLabelFontSize || availableHeight < currentLabelFontSize) {\n      self.style(\"display\", \"none\");\n    }\n  });\n  if (config.showValues !== false) {\n    const leafValues = cell.append(\"text\").attr(\"class\", \"treemapValue\").attr(\"x\", d => (d.x1 - d.x0) / 2).attr(\"y\", function (d) {\n      return (d.y1 - d.y0) / 2;\n    }).attr(\"style\", d => {\n      const labelStyles = \"text-anchor: middle; dominant-baseline: hanging; font-size: 28px;fill:\" + colorScaleLabel(d.data.name) + \";\";\n      const styles = styles2String({\n        cssCompiledStyles: d.data.cssCompiledStyles\n      });\n      return labelStyles + styles.labelStyles.replace(\"color:\", \"fill:\");\n    }).attr(\"clip-path\", (_d, i) => `url(#clip-${id}-${i})`).text(d => d.value ? valueFormat(d.value) : \"\");\n    leafValues.each(function (d) {\n      const valueTextElement = select(this);\n      const parentCellNode = this.parentNode;\n      if (!parentCellNode) {\n        valueTextElement.style(\"display\", \"none\");\n        return;\n      }\n      const labelElement = select(parentCellNode).select(\".treemapLabel\");\n      if (labelElement.empty() || labelElement.style(\"display\") === \"none\") {\n        valueTextElement.style(\"display\", \"none\");\n        return;\n      }\n      const finalLabelFontSize = parseFloat(labelElement.style(\"font-size\"));\n      const originalValueFontSize = 28;\n      const valueScaleFactor = 0.6;\n      const minValueFontSize = 6;\n      const spacingBetweenLabelAndValue = 2;\n      const actualValueFontSize = Math.max(minValueFontSize, Math.min(originalValueFontSize, Math.round(finalLabelFontSize * valueScaleFactor)));\n      valueTextElement.style(\"font-size\", `${actualValueFontSize}px`);\n      const labelCenterY = (d.y1 - d.y0) / 2;\n      const valueTopActualY = labelCenterY + finalLabelFontSize / 2 + spacingBetweenLabelAndValue;\n      valueTextElement.attr(\"y\", valueTopActualY);\n      const nodeWidth = d.x1 - d.x0;\n      const nodeTotalHeight = d.y1 - d.y0;\n      const cellBottomPadding = 4;\n      const maxValueBottomY = nodeTotalHeight - cellBottomPadding;\n      const availableWidthForValue = nodeWidth - 2 * 4;\n      if (valueTextElement.node().getComputedTextLength() > availableWidthForValue || valueTopActualY + actualValueFontSize > maxValueBottomY || actualValueFontSize < minValueFontSize) {\n        valueTextElement.style(\"display\", \"none\");\n      } else {\n        valueTextElement.style(\"display\", null);\n      }\n    });\n  }\n  const diagramPadding = config.diagramPadding ?? 8;\n  setupViewPortForSVG(svg, diagramPadding, \"flowchart\", config?.useMaxWidth || false);\n}, \"draw\");\nvar getClasses2 = /* @__PURE__ */__name(function (_text, diagramObj) {\n  return diagramObj.db.getClasses();\n}, \"getClasses\");\nvar renderer = {\n  draw,\n  getClasses: getClasses2\n};\n\n// src/diagrams/treemap/styles.ts\nvar defaultTreemapStyleOptions = {\n  sectionStrokeColor: \"black\",\n  sectionStrokeWidth: \"1\",\n  sectionFillColor: \"#efefef\",\n  leafStrokeColor: \"black\",\n  leafStrokeWidth: \"1\",\n  leafFillColor: \"#efefef\",\n  labelColor: \"black\",\n  labelFontSize: \"12px\",\n  valueFontSize: \"10px\",\n  valueColor: \"black\",\n  titleColor: \"black\",\n  titleFontSize: \"14px\"\n};\nvar getStyles = /* @__PURE__ */__name(({\n  treemap: treemap2\n} = {}) => {\n  const options = cleanAndMerge(defaultTreemapStyleOptions, treemap2);\n  return `\n  .treemapNode.section {\n    stroke: ${options.sectionStrokeColor};\n    stroke-width: ${options.sectionStrokeWidth};\n    fill: ${options.sectionFillColor};\n  }\n  .treemapNode.leaf {\n    stroke: ${options.leafStrokeColor};\n    stroke-width: ${options.leafStrokeWidth};\n    fill: ${options.leafFillColor};\n  }\n  .treemapLabel {\n    fill: ${options.labelColor};\n    font-size: ${options.labelFontSize};\n  }\n  .treemapValue {\n    fill: ${options.valueColor};\n    font-size: ${options.valueFontSize};\n  }\n  .treemapTitle {\n    fill: ${options.titleColor};\n    font-size: ${options.titleFontSize};\n  }\n  `;\n}, \"getStyles\");\nvar styles_default = getStyles;\n\n// src/diagrams/treemap/diagram.ts\nvar diagram = {\n  parser,\n  db,\n  renderer,\n  styles: styles_default\n};\nexport { diagram };","map":{"version":3,"names":["setupViewPortForSVG","isLabelStyle","styles2String","populateCommonDb","ImperativeState","cleanAndMerge","selectSvgElement","__name","clear","configureSvgSize","defaultConfig_default","getAccDescription","getAccTitle","getConfig","getDiagramTitle","log","setAccDescription","setAccTitle","setDiagramTitle","defaultTreemapData","nodes","levels","Map","outerNodes","classes","state","structuredClone","getConfig2","defaultConfig","userConfig","treemap","getNodes","records","addNode","node","level","data","push","set","root","getRoot","name","children","addClass","id","_style","styleClass","get","styles","textStyles","replace","split","forEach","s","getClasses","getStylesForClass","classSelector","clear2","reset","db","parse","buildHierarchy","items","length","stack","item","type","cssCompiledStyles","value","pop","parent","populate","ast","row","TreemapRows","$type","className","styleText","indent","parseInt","getItemName","join","itemData","hierarchyNodes","addNodesRecursively","String","parser","text","parseFunc","debug","error","scaleOrdinal","hierarchy","format","select","DEFAULT_INNER_PADDING","SECTION_INNER_PADDING","SECTION_HEADER_HEIGHT","draw","_text","_version","diagram2","treemapDb","config","treemapInnerPadding","padding","title","themeVariables","titleHeight","svg","width","nodeWidth","height","nodeHeight","svgWidth","svgHeight","attr","useMaxWidth","valueFormat","formatStr","startsWith","includes","precision","exec","precisionStr","restOfFormat","substring","colorScale","range","cScale0","cScale1","cScale2","cScale3","cScale4","cScale5","cScale6","cScale7","cScale8","cScale9","cScale10","cScale11","colorScalePeer","cScalePeer0","cScalePeer1","cScalePeer2","cScalePeer3","cScalePeer4","cScalePeer5","cScalePeer6","cScalePeer7","cScalePeer8","cScalePeer9","cScalePeer10","cScalePeer11","colorScaleLabel","cScaleLabel0","cScaleLabel1","cScaleLabel2","cScaleLabel3","cScaleLabel4","cScaleLabel5","cScaleLabel6","cScaleLabel7","cScaleLabel8","cScaleLabel9","cScaleLabel10","cScaleLabel11","append","g","hierarchyRoot","sum","d","sort","a","b","treemapLayout","size","paddingTop","paddingInner","paddingLeft","paddingRight","paddingBottom","round","treemapData","branchNodes","descendants","filter","sections","selectAll","enter","x0","y0","x1","depth","_d","i","Math","max","y1","nodeStyles","borderStyles","labelStyles","each","self","originalText","totalHeaderWidth","labelXPosition","spaceForTextContent","showValues","valueEndsAtXRelative","estimatedValueTextActualWidth","gapBetweenLabelAndValue","labelMustEndBeforeX","labelOwnRightPadding","minimumWidthToDisplay","actualAvailableWidth","textNode","currentTextContentLength","getComputedTextLength","ellipsis","currentTruncatedText","leafNodes","leaves","cell","leafLabels","availableWidth","availableHeight","style","currentLabelFontSize","minLabelFontSize","originalValueRelFontSize","valueScaleFactor","minValueFontSize","spacingBetweenLabelAndValue","prospectiveValueFontSize","min","combinedHeight","leafValues","valueTextElement","parentCellNode","parentNode","labelElement","empty","finalLabelFontSize","parseFloat","originalValueFontSize","actualValueFontSize","labelCenterY","valueTopActualY","nodeTotalHeight","cellBottomPadding","maxValueBottomY","availableWidthForValue","diagramPadding","getClasses2","diagramObj","renderer","defaultTreemapStyleOptions","sectionStrokeColor","sectionStrokeWidth","sectionFillColor","leafStrokeColor","leafStrokeWidth","leafFillColor","labelColor","labelFontSize","valueFontSize","valueColor","titleColor","titleFontSize","getStyles","treemap2","options","styles_default","diagram"],"sources":["/Users/mayurk/TechDataLineage/TechDataLineage/frontend/node_modules/mermaid/dist/chunks/mermaid.core/diagram-3EMPZRKU.mjs"],"sourcesContent":["import {\n  setupViewPortForSVG\n} from \"./chunk-SKB7J2MH.mjs\";\nimport {\n  isLabelStyle,\n  styles2String\n} from \"./chunk-UWXLY5YG.mjs\";\nimport {\n  populateCommonDb\n} from \"./chunk-353BL4L5.mjs\";\nimport {\n  ImperativeState\n} from \"./chunk-AACKK3MU.mjs\";\nimport {\n  cleanAndMerge\n} from \"./chunk-55PJQP7W.mjs\";\nimport {\n  selectSvgElement\n} from \"./chunk-P3VETL53.mjs\";\nimport {\n  __name,\n  clear,\n  configureSvgSize,\n  defaultConfig_default,\n  getAccDescription,\n  getAccTitle,\n  getConfig,\n  getDiagramTitle,\n  log,\n  setAccDescription,\n  setAccTitle,\n  setDiagramTitle\n} from \"./chunk-3XYRH5AP.mjs\";\n\n// src/diagrams/treemap/db.ts\nvar defaultTreemapData = {\n  nodes: [],\n  levels: /* @__PURE__ */ new Map(),\n  outerNodes: [],\n  classes: /* @__PURE__ */ new Map()\n};\nvar state = new ImperativeState(() => structuredClone(defaultTreemapData));\nvar getConfig2 = /* @__PURE__ */ __name(() => {\n  const defaultConfig = defaultConfig_default;\n  const userConfig = getConfig();\n  return cleanAndMerge({\n    ...defaultConfig.treemap,\n    ...userConfig.treemap ?? {}\n  });\n}, \"getConfig\");\nvar getNodes = /* @__PURE__ */ __name(() => state.records.nodes, \"getNodes\");\nvar addNode = /* @__PURE__ */ __name((node, level) => {\n  const data = state.records;\n  data.nodes.push(node);\n  data.levels.set(node, level);\n  if (level === 0) {\n    data.outerNodes.push(node);\n  }\n  if (level === 0 && !data.root) {\n    data.root = node;\n  }\n}, \"addNode\");\nvar getRoot = /* @__PURE__ */ __name(() => ({ name: \"\", children: state.records.outerNodes }), \"getRoot\");\nvar addClass = /* @__PURE__ */ __name((id, _style) => {\n  const classes = state.records.classes;\n  const styleClass = classes.get(id) ?? { id, styles: [], textStyles: [] };\n  classes.set(id, styleClass);\n  const styles = _style.replace(/\\\\,/g, \"\\xA7\\xA7\\xA7\").replace(/,/g, \";\").replace(/§§§/g, \",\").split(\";\");\n  if (styles) {\n    styles.forEach((s) => {\n      if (isLabelStyle(s)) {\n        if (styleClass?.textStyles) {\n          styleClass.textStyles.push(s);\n        } else {\n          styleClass.textStyles = [s];\n        }\n      }\n      if (styleClass?.styles) {\n        styleClass.styles.push(s);\n      } else {\n        styleClass.styles = [s];\n      }\n    });\n  }\n  classes.set(id, styleClass);\n}, \"addClass\");\nvar getClasses = /* @__PURE__ */ __name(() => {\n  return state.records.classes;\n}, \"getClasses\");\nvar getStylesForClass = /* @__PURE__ */ __name((classSelector) => {\n  return state.records.classes.get(classSelector)?.styles ?? [];\n}, \"getStylesForClass\");\nvar clear2 = /* @__PURE__ */ __name(() => {\n  clear();\n  state.reset();\n}, \"clear\");\nvar db = {\n  getNodes,\n  addNode,\n  getRoot,\n  getConfig: getConfig2,\n  clear: clear2,\n  setAccTitle,\n  getAccTitle,\n  setDiagramTitle,\n  getDiagramTitle,\n  getAccDescription,\n  setAccDescription,\n  addClass,\n  getClasses,\n  getStylesForClass\n};\n\n// src/diagrams/treemap/parser.ts\nimport { parse } from \"@mermaid-js/parser\";\n\n// src/diagrams/treemap/utils.ts\nfunction buildHierarchy(items) {\n  if (!items.length) {\n    return [];\n  }\n  const root = [];\n  const stack = [];\n  items.forEach((item) => {\n    const node = {\n      name: item.name,\n      children: item.type === \"Leaf\" ? void 0 : []\n    };\n    node.classSelector = item?.classSelector;\n    if (item?.cssCompiledStyles) {\n      node.cssCompiledStyles = [item.cssCompiledStyles];\n    }\n    if (item.type === \"Leaf\" && item.value !== void 0) {\n      node.value = item.value;\n    }\n    while (stack.length > 0 && stack[stack.length - 1].level >= item.level) {\n      stack.pop();\n    }\n    if (stack.length === 0) {\n      root.push(node);\n    } else {\n      const parent = stack[stack.length - 1].node;\n      if (parent.children) {\n        parent.children.push(node);\n      } else {\n        parent.children = [node];\n      }\n    }\n    if (item.type !== \"Leaf\") {\n      stack.push({ node, level: item.level });\n    }\n  });\n  return root;\n}\n__name(buildHierarchy, \"buildHierarchy\");\n\n// src/diagrams/treemap/parser.ts\nvar populate = /* @__PURE__ */ __name((ast) => {\n  populateCommonDb(ast, db);\n  const items = [];\n  for (const row of ast.TreemapRows ?? []) {\n    if (row.$type === \"ClassDefStatement\") {\n      db.addClass(row.className ?? \"\", row.styleText ?? \"\");\n    }\n  }\n  for (const row of ast.TreemapRows ?? []) {\n    const item = row.item;\n    if (!item) {\n      continue;\n    }\n    const level = row.indent ? parseInt(row.indent) : 0;\n    const name = getItemName(item);\n    const styles = item.classSelector ? db.getStylesForClass(item.classSelector) : [];\n    const cssCompiledStyles = styles.length > 0 ? styles.join(\";\") : void 0;\n    const itemData = {\n      level,\n      name,\n      type: item.$type,\n      value: item.value,\n      classSelector: item.classSelector,\n      cssCompiledStyles\n    };\n    items.push(itemData);\n  }\n  const hierarchyNodes = buildHierarchy(items);\n  const addNodesRecursively = /* @__PURE__ */ __name((nodes, level) => {\n    for (const node of nodes) {\n      db.addNode(node, level);\n      if (node.children && node.children.length > 0) {\n        addNodesRecursively(node.children, level + 1);\n      }\n    }\n  }, \"addNodesRecursively\");\n  addNodesRecursively(hierarchyNodes, 0);\n}, \"populate\");\nvar getItemName = /* @__PURE__ */ __name((item) => {\n  return item.name ? String(item.name) : \"\";\n}, \"getItemName\");\nvar parser = {\n  parse: /* @__PURE__ */ __name(async (text) => {\n    try {\n      const parseFunc = parse;\n      const ast = await parseFunc(\"treemap\", text);\n      log.debug(\"Treemap AST:\", ast);\n      populate(ast);\n    } catch (error) {\n      log.error(\"Error parsing treemap:\", error);\n      throw error;\n    }\n  }, \"parse\")\n};\n\n// src/diagrams/treemap/renderer.ts\nimport { scaleOrdinal, treemap, hierarchy, format, select } from \"d3\";\nvar DEFAULT_INNER_PADDING = 10;\nvar SECTION_INNER_PADDING = 10;\nvar SECTION_HEADER_HEIGHT = 25;\nvar draw = /* @__PURE__ */ __name((_text, id, _version, diagram2) => {\n  const treemapDb = diagram2.db;\n  const config = treemapDb.getConfig();\n  const treemapInnerPadding = config.padding ?? DEFAULT_INNER_PADDING;\n  const title = treemapDb.getDiagramTitle();\n  const root = treemapDb.getRoot();\n  const { themeVariables } = getConfig();\n  if (!root) {\n    return;\n  }\n  const titleHeight = title ? 30 : 0;\n  const svg = selectSvgElement(id);\n  const width = config.nodeWidth ? config.nodeWidth * SECTION_INNER_PADDING : 960;\n  const height = config.nodeHeight ? config.nodeHeight * SECTION_INNER_PADDING : 500;\n  const svgWidth = width;\n  const svgHeight = height + titleHeight;\n  svg.attr(\"viewBox\", `0 0 ${svgWidth} ${svgHeight}`);\n  configureSvgSize(svg, svgHeight, svgWidth, config.useMaxWidth);\n  let valueFormat;\n  try {\n    const formatStr = config.valueFormat || \",\";\n    if (formatStr === \"$0,0\") {\n      valueFormat = /* @__PURE__ */ __name((value) => \"$\" + format(\",\")(value), \"valueFormat\");\n    } else if (formatStr.startsWith(\"$\") && formatStr.includes(\",\")) {\n      const precision = /\\.\\d+/.exec(formatStr);\n      const precisionStr = precision ? precision[0] : \"\";\n      valueFormat = /* @__PURE__ */ __name((value) => \"$\" + format(\",\" + precisionStr)(value), \"valueFormat\");\n    } else if (formatStr.startsWith(\"$\")) {\n      const restOfFormat = formatStr.substring(1);\n      valueFormat = /* @__PURE__ */ __name((value) => \"$\" + format(restOfFormat || \"\")(value), \"valueFormat\");\n    } else {\n      valueFormat = format(formatStr);\n    }\n  } catch (error) {\n    log.error(\"Error creating format function:\", error);\n    valueFormat = format(\",\");\n  }\n  const colorScale = scaleOrdinal().range([\n    \"transparent\",\n    themeVariables.cScale0,\n    themeVariables.cScale1,\n    themeVariables.cScale2,\n    themeVariables.cScale3,\n    themeVariables.cScale4,\n    themeVariables.cScale5,\n    themeVariables.cScale6,\n    themeVariables.cScale7,\n    themeVariables.cScale8,\n    themeVariables.cScale9,\n    themeVariables.cScale10,\n    themeVariables.cScale11\n  ]);\n  const colorScalePeer = scaleOrdinal().range([\n    \"transparent\",\n    themeVariables.cScalePeer0,\n    themeVariables.cScalePeer1,\n    themeVariables.cScalePeer2,\n    themeVariables.cScalePeer3,\n    themeVariables.cScalePeer4,\n    themeVariables.cScalePeer5,\n    themeVariables.cScalePeer6,\n    themeVariables.cScalePeer7,\n    themeVariables.cScalePeer8,\n    themeVariables.cScalePeer9,\n    themeVariables.cScalePeer10,\n    themeVariables.cScalePeer11\n  ]);\n  const colorScaleLabel = scaleOrdinal().range([\n    themeVariables.cScaleLabel0,\n    themeVariables.cScaleLabel1,\n    themeVariables.cScaleLabel2,\n    themeVariables.cScaleLabel3,\n    themeVariables.cScaleLabel4,\n    themeVariables.cScaleLabel5,\n    themeVariables.cScaleLabel6,\n    themeVariables.cScaleLabel7,\n    themeVariables.cScaleLabel8,\n    themeVariables.cScaleLabel9,\n    themeVariables.cScaleLabel10,\n    themeVariables.cScaleLabel11\n  ]);\n  if (title) {\n    svg.append(\"text\").attr(\"x\", svgWidth / 2).attr(\"y\", titleHeight / 2).attr(\"class\", \"treemapTitle\").attr(\"text-anchor\", \"middle\").attr(\"dominant-baseline\", \"middle\").text(title);\n  }\n  const g = svg.append(\"g\").attr(\"transform\", `translate(0, ${titleHeight})`).attr(\"class\", \"treemapContainer\");\n  const hierarchyRoot = hierarchy(root).sum((d) => d.value ?? 0).sort((a, b) => (b.value ?? 0) - (a.value ?? 0));\n  const treemapLayout = treemap().size([width, height]).paddingTop(\n    (d) => d.children && d.children.length > 0 ? SECTION_HEADER_HEIGHT + SECTION_INNER_PADDING : 0\n  ).paddingInner(treemapInnerPadding).paddingLeft((d) => d.children && d.children.length > 0 ? SECTION_INNER_PADDING : 0).paddingRight((d) => d.children && d.children.length > 0 ? SECTION_INNER_PADDING : 0).paddingBottom((d) => d.children && d.children.length > 0 ? SECTION_INNER_PADDING : 0).round(true);\n  const treemapData = treemapLayout(hierarchyRoot);\n  const branchNodes = treemapData.descendants().filter((d) => d.children && d.children.length > 0);\n  const sections = g.selectAll(\".treemapSection\").data(branchNodes).enter().append(\"g\").attr(\"class\", \"treemapSection\").attr(\"transform\", (d) => `translate(${d.x0},${d.y0})`);\n  sections.append(\"rect\").attr(\"width\", (d) => d.x1 - d.x0).attr(\"height\", SECTION_HEADER_HEIGHT).attr(\"class\", \"treemapSectionHeader\").attr(\"fill\", \"none\").attr(\"fill-opacity\", 0.6).attr(\"stroke-width\", 0.6).attr(\"style\", (d) => {\n    if (d.depth === 0) {\n      return \"display: none;\";\n    }\n    return \"\";\n  });\n  sections.append(\"clipPath\").attr(\"id\", (_d, i) => `clip-section-${id}-${i}`).append(\"rect\").attr(\"width\", (d) => Math.max(0, d.x1 - d.x0 - 12)).attr(\"height\", SECTION_HEADER_HEIGHT);\n  sections.append(\"rect\").attr(\"width\", (d) => d.x1 - d.x0).attr(\"height\", (d) => d.y1 - d.y0).attr(\"class\", (_d, i) => {\n    return `treemapSection section${i}`;\n  }).attr(\"fill\", (d) => colorScale(d.data.name)).attr(\"fill-opacity\", 0.6).attr(\"stroke\", (d) => colorScalePeer(d.data.name)).attr(\"stroke-width\", 2).attr(\"stroke-opacity\", 0.4).attr(\"style\", (d) => {\n    if (d.depth === 0) {\n      return \"display: none;\";\n    }\n    const styles = styles2String({ cssCompiledStyles: d.data.cssCompiledStyles });\n    return styles.nodeStyles + \";\" + styles.borderStyles.join(\";\");\n  });\n  sections.append(\"text\").attr(\"class\", \"treemapSectionLabel\").attr(\"x\", 6).attr(\"y\", SECTION_HEADER_HEIGHT / 2).attr(\"dominant-baseline\", \"middle\").text((d) => d.depth === 0 ? \"\" : d.data.name).attr(\"font-weight\", \"bold\").attr(\"style\", (d) => {\n    if (d.depth === 0) {\n      return \"display: none;\";\n    }\n    const labelStyles = \"dominant-baseline: middle; font-size: 12px; fill:\" + colorScaleLabel(d.data.name) + \"; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;\";\n    const styles = styles2String({ cssCompiledStyles: d.data.cssCompiledStyles });\n    return labelStyles + styles.labelStyles.replace(\"color:\", \"fill:\");\n  }).each(function(d) {\n    if (d.depth === 0) {\n      return;\n    }\n    const self = select(this);\n    const originalText = d.data.name;\n    self.text(originalText);\n    const totalHeaderWidth = d.x1 - d.x0;\n    const labelXPosition = 6;\n    let spaceForTextContent;\n    if (config.showValues !== false && d.value) {\n      const valueEndsAtXRelative = totalHeaderWidth - 10;\n      const estimatedValueTextActualWidth = 30;\n      const gapBetweenLabelAndValue = 10;\n      const labelMustEndBeforeX = valueEndsAtXRelative - estimatedValueTextActualWidth - gapBetweenLabelAndValue;\n      spaceForTextContent = labelMustEndBeforeX - labelXPosition;\n    } else {\n      const labelOwnRightPadding = 6;\n      spaceForTextContent = totalHeaderWidth - labelXPosition - labelOwnRightPadding;\n    }\n    const minimumWidthToDisplay = 15;\n    const actualAvailableWidth = Math.max(minimumWidthToDisplay, spaceForTextContent);\n    const textNode = self.node();\n    const currentTextContentLength = textNode.getComputedTextLength();\n    if (currentTextContentLength > actualAvailableWidth) {\n      const ellipsis = \"...\";\n      let currentTruncatedText = originalText;\n      while (currentTruncatedText.length > 0) {\n        currentTruncatedText = originalText.substring(0, currentTruncatedText.length - 1);\n        if (currentTruncatedText.length === 0) {\n          self.text(ellipsis);\n          if (textNode.getComputedTextLength() > actualAvailableWidth) {\n            self.text(\"\");\n          }\n          break;\n        }\n        self.text(currentTruncatedText + ellipsis);\n        if (textNode.getComputedTextLength() <= actualAvailableWidth) {\n          break;\n        }\n      }\n    }\n  });\n  if (config.showValues !== false) {\n    sections.append(\"text\").attr(\"class\", \"treemapSectionValue\").attr(\"x\", (d) => d.x1 - d.x0 - 10).attr(\"y\", SECTION_HEADER_HEIGHT / 2).attr(\"text-anchor\", \"end\").attr(\"dominant-baseline\", \"middle\").text((d) => d.value ? valueFormat(d.value) : \"\").attr(\"font-style\", \"italic\").attr(\"style\", (d) => {\n      if (d.depth === 0) {\n        return \"display: none;\";\n      }\n      const labelStyles = \"text-anchor: end; dominant-baseline: middle; font-size: 10px; fill:\" + colorScaleLabel(d.data.name) + \"; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;\";\n      const styles = styles2String({ cssCompiledStyles: d.data.cssCompiledStyles });\n      return labelStyles + styles.labelStyles.replace(\"color:\", \"fill:\");\n    });\n  }\n  const leafNodes = treemapData.leaves();\n  const cell = g.selectAll(\".treemapLeafGroup\").data(leafNodes).enter().append(\"g\").attr(\"class\", (d, i) => {\n    return `treemapNode treemapLeafGroup leaf${i}${d.data.classSelector ? ` ${d.data.classSelector}` : \"\"}x`;\n  }).attr(\"transform\", (d) => `translate(${d.x0},${d.y0})`);\n  cell.append(\"rect\").attr(\"width\", (d) => d.x1 - d.x0).attr(\"height\", (d) => d.y1 - d.y0).attr(\"class\", \"treemapLeaf\").attr(\"fill\", (d) => {\n    return d.parent ? colorScale(d.parent.data.name) : colorScale(d.data.name);\n  }).attr(\"style\", (d) => {\n    const styles = styles2String({ cssCompiledStyles: d.data.cssCompiledStyles });\n    return styles.nodeStyles;\n  }).attr(\"fill-opacity\", 0.3).attr(\"stroke\", (d) => {\n    return d.parent ? colorScale(d.parent.data.name) : colorScale(d.data.name);\n  }).attr(\"stroke-width\", 3);\n  cell.append(\"clipPath\").attr(\"id\", (_d, i) => `clip-${id}-${i}`).append(\"rect\").attr(\"width\", (d) => Math.max(0, d.x1 - d.x0 - 4)).attr(\"height\", (d) => Math.max(0, d.y1 - d.y0 - 4));\n  const leafLabels = cell.append(\"text\").attr(\"class\", \"treemapLabel\").attr(\"x\", (d) => (d.x1 - d.x0) / 2).attr(\"y\", (d) => (d.y1 - d.y0) / 2).attr(\"style\", (d) => {\n    const labelStyles = \"text-anchor: middle; dominant-baseline: middle; font-size: 38px;fill:\" + colorScaleLabel(d.data.name) + \";\";\n    const styles = styles2String({ cssCompiledStyles: d.data.cssCompiledStyles });\n    return labelStyles + styles.labelStyles.replace(\"color:\", \"fill:\");\n  }).attr(\"clip-path\", (_d, i) => `url(#clip-${id}-${i})`).text((d) => d.data.name);\n  leafLabels.each(function(d) {\n    const self = select(this);\n    const nodeWidth = d.x1 - d.x0;\n    const nodeHeight = d.y1 - d.y0;\n    const textNode = self.node();\n    const padding = 4;\n    const availableWidth = nodeWidth - 2 * padding;\n    const availableHeight = nodeHeight - 2 * padding;\n    if (availableWidth < 10 || availableHeight < 10) {\n      self.style(\"display\", \"none\");\n      return;\n    }\n    let currentLabelFontSize = parseInt(self.style(\"font-size\"), 10);\n    const minLabelFontSize = 8;\n    const originalValueRelFontSize = 28;\n    const valueScaleFactor = 0.6;\n    const minValueFontSize = 6;\n    const spacingBetweenLabelAndValue = 2;\n    while (textNode.getComputedTextLength() > availableWidth && currentLabelFontSize > minLabelFontSize) {\n      currentLabelFontSize--;\n      self.style(\"font-size\", `${currentLabelFontSize}px`);\n    }\n    let prospectiveValueFontSize = Math.max(\n      minValueFontSize,\n      Math.min(originalValueRelFontSize, Math.round(currentLabelFontSize * valueScaleFactor))\n    );\n    let combinedHeight = currentLabelFontSize + spacingBetweenLabelAndValue + prospectiveValueFontSize;\n    while (combinedHeight > availableHeight && currentLabelFontSize > minLabelFontSize) {\n      currentLabelFontSize--;\n      prospectiveValueFontSize = Math.max(\n        minValueFontSize,\n        Math.min(originalValueRelFontSize, Math.round(currentLabelFontSize * valueScaleFactor))\n      );\n      if (prospectiveValueFontSize < minValueFontSize && currentLabelFontSize === minLabelFontSize) {\n        break;\n      }\n      self.style(\"font-size\", `${currentLabelFontSize}px`);\n      combinedHeight = currentLabelFontSize + spacingBetweenLabelAndValue + prospectiveValueFontSize;\n      if (prospectiveValueFontSize <= minValueFontSize && combinedHeight > availableHeight) {\n      }\n    }\n    self.style(\"font-size\", `${currentLabelFontSize}px`);\n    if (textNode.getComputedTextLength() > availableWidth || currentLabelFontSize < minLabelFontSize || availableHeight < currentLabelFontSize) {\n      self.style(\"display\", \"none\");\n    }\n  });\n  if (config.showValues !== false) {\n    const leafValues = cell.append(\"text\").attr(\"class\", \"treemapValue\").attr(\"x\", (d) => (d.x1 - d.x0) / 2).attr(\"y\", function(d) {\n      return (d.y1 - d.y0) / 2;\n    }).attr(\"style\", (d) => {\n      const labelStyles = \"text-anchor: middle; dominant-baseline: hanging; font-size: 28px;fill:\" + colorScaleLabel(d.data.name) + \";\";\n      const styles = styles2String({ cssCompiledStyles: d.data.cssCompiledStyles });\n      return labelStyles + styles.labelStyles.replace(\"color:\", \"fill:\");\n    }).attr(\"clip-path\", (_d, i) => `url(#clip-${id}-${i})`).text((d) => d.value ? valueFormat(d.value) : \"\");\n    leafValues.each(function(d) {\n      const valueTextElement = select(this);\n      const parentCellNode = this.parentNode;\n      if (!parentCellNode) {\n        valueTextElement.style(\"display\", \"none\");\n        return;\n      }\n      const labelElement = select(parentCellNode).select(\".treemapLabel\");\n      if (labelElement.empty() || labelElement.style(\"display\") === \"none\") {\n        valueTextElement.style(\"display\", \"none\");\n        return;\n      }\n      const finalLabelFontSize = parseFloat(labelElement.style(\"font-size\"));\n      const originalValueFontSize = 28;\n      const valueScaleFactor = 0.6;\n      const minValueFontSize = 6;\n      const spacingBetweenLabelAndValue = 2;\n      const actualValueFontSize = Math.max(\n        minValueFontSize,\n        Math.min(originalValueFontSize, Math.round(finalLabelFontSize * valueScaleFactor))\n      );\n      valueTextElement.style(\"font-size\", `${actualValueFontSize}px`);\n      const labelCenterY = (d.y1 - d.y0) / 2;\n      const valueTopActualY = labelCenterY + finalLabelFontSize / 2 + spacingBetweenLabelAndValue;\n      valueTextElement.attr(\"y\", valueTopActualY);\n      const nodeWidth = d.x1 - d.x0;\n      const nodeTotalHeight = d.y1 - d.y0;\n      const cellBottomPadding = 4;\n      const maxValueBottomY = nodeTotalHeight - cellBottomPadding;\n      const availableWidthForValue = nodeWidth - 2 * 4;\n      if (valueTextElement.node().getComputedTextLength() > availableWidthForValue || valueTopActualY + actualValueFontSize > maxValueBottomY || actualValueFontSize < minValueFontSize) {\n        valueTextElement.style(\"display\", \"none\");\n      } else {\n        valueTextElement.style(\"display\", null);\n      }\n    });\n  }\n  const diagramPadding = config.diagramPadding ?? 8;\n  setupViewPortForSVG(svg, diagramPadding, \"flowchart\", config?.useMaxWidth || false);\n}, \"draw\");\nvar getClasses2 = /* @__PURE__ */ __name(function(_text, diagramObj) {\n  return diagramObj.db.getClasses();\n}, \"getClasses\");\nvar renderer = { draw, getClasses: getClasses2 };\n\n// src/diagrams/treemap/styles.ts\nvar defaultTreemapStyleOptions = {\n  sectionStrokeColor: \"black\",\n  sectionStrokeWidth: \"1\",\n  sectionFillColor: \"#efefef\",\n  leafStrokeColor: \"black\",\n  leafStrokeWidth: \"1\",\n  leafFillColor: \"#efefef\",\n  labelColor: \"black\",\n  labelFontSize: \"12px\",\n  valueFontSize: \"10px\",\n  valueColor: \"black\",\n  titleColor: \"black\",\n  titleFontSize: \"14px\"\n};\nvar getStyles = /* @__PURE__ */ __name(({\n  treemap: treemap2\n} = {}) => {\n  const options = cleanAndMerge(defaultTreemapStyleOptions, treemap2);\n  return `\n  .treemapNode.section {\n    stroke: ${options.sectionStrokeColor};\n    stroke-width: ${options.sectionStrokeWidth};\n    fill: ${options.sectionFillColor};\n  }\n  .treemapNode.leaf {\n    stroke: ${options.leafStrokeColor};\n    stroke-width: ${options.leafStrokeWidth};\n    fill: ${options.leafFillColor};\n  }\n  .treemapLabel {\n    fill: ${options.labelColor};\n    font-size: ${options.labelFontSize};\n  }\n  .treemapValue {\n    fill: ${options.valueColor};\n    font-size: ${options.valueFontSize};\n  }\n  .treemapTitle {\n    fill: ${options.titleColor};\n    font-size: ${options.titleFontSize};\n  }\n  `;\n}, \"getStyles\");\nvar styles_default = getStyles;\n\n// src/diagrams/treemap/diagram.ts\nvar diagram = {\n  parser,\n  db,\n  renderer,\n  styles: styles_default\n};\nexport {\n  diagram\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}